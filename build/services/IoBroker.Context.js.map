{
  "version": 3,
  "sources": ["../../src/services/IoBroker.Context.ts"],
  "sourcesContent": ["import {\r\n  IConnectedServiceContext,\r\n  ICsLogger,\r\n  OutboundStateChangeCallback,\r\n  ChangeType,\r\n  AcaadAuthentication,\r\n  AcaadHost,\r\n  Component,\r\n  ComponentDescriptor\r\n} from '@acaad/abstractions/src';\r\n\r\nimport IoBrokerLogger from './IoBroker.Logger';\r\nimport { injectable } from 'tsyringe';\r\nimport { Option } from 'effect';\r\nimport { Actions } from './IoBroker.Constants';\r\nimport { isObject } from 'effect/Predicate';\r\nimport { isArray } from 'effect/Array';\r\n\r\n@injectable()\r\nexport class IoBrokerContext implements IConnectedServiceContext {\r\n  public static Token = 'di-IoBrokerContext';\r\n\r\n  public logger: ICsLogger;\r\n\r\n  private _adapter: ioBroker.Adapter;\r\n\r\n  private _componentState: Record<string, Component> = {};\r\n\r\n  private _outboundStateChangeCallback: OutboundStateChangeCallback | null = null;\r\n\r\n  constructor(adapter: ioBroker.Adapter) {\r\n    this.logger = new IoBrokerLogger(adapter);\r\n    this._adapter = adapter;\r\n  }\r\n\r\n  getConfiguredServers(): AcaadHost[] {\r\n    let target = this._adapter.config.targetServices;\r\n    const authFromCfg = this._adapter.config.auth;\r\n\r\n    /* Enable int-tests */\r\n    if (isObject(target) && !isArray(target)) {\r\n      target = Object.values(target);\r\n    }\r\n\r\n    if (!target) {\r\n      return [];\r\n    }\r\n\r\n    let auth: AcaadAuthentication | undefined;\r\n    if (authFromCfg) {\r\n      auth = new AcaadAuthentication(\r\n        authFromCfg.tokenUrl,\r\n        authFromCfg.clientId,\r\n        authFromCfg.clientSecret,\r\n        []\r\n      );\r\n    }\r\n\r\n    return target.map((t) => new AcaadHost(t.name, t.host, t.port, auth, t.signalrPort));\r\n  }\r\n\r\n  getNamespace(): string {\r\n    return this._adapter.namespace;\r\n  }\r\n\r\n  // TODO: Use preserver\r\n  async extendObjectAsync(\r\n    objectIdentifier: string,\r\n    partialObject: ioBroker.PartialObject\r\n  ): ioBroker.SetObjectPromise {\r\n    return await this._adapter.extendObject(objectIdentifier, partialObject, {\r\n      preserve: { common: ['name'] }\r\n    });\r\n  }\r\n\r\n  async registerStateChangeCallbackAsync(cb: OutboundStateChangeCallback): Promise<void> {\r\n    this.logger.logDebug('Received state change callback. Registering.');\r\n\r\n    // TODO: Mutex removed\r\n\r\n    try {\r\n      this._adapter.subscribeStates(`${this._adapter.namespace}.*`);\r\n      this._outboundStateChangeCallback = cb;\r\n    } finally {\r\n      // TODO: Mutex removed\r\n    }\r\n  }\r\n\r\n  async onStateChangeAsync(id: string, state: ioBroker.State | null | undefined): Promise<void> {\r\n    if (state?.ack === true) {\r\n      return;\r\n    }\r\n\r\n    const triggeredForComponent: Component | undefined | null = this._componentState[id];\r\n\r\n    if (!triggeredForComponent) {\r\n      this.logger.logWarning(`State change for unknown component with id ${id}`);\r\n      return;\r\n    }\r\n\r\n    if (!this._outboundStateChangeCallback) {\r\n      this.logger.logWarning(`State change for component ${triggeredForComponent.name} but no callback set.`);\r\n      return;\r\n    }\r\n\r\n    const changeType = this.getChangeType(id);\r\n\r\n    if (!changeType) {\r\n      this.logger.logDebug(\r\n        `Change type for state ${id} could not be determined. Assuming user-defined state or update and doing nothing.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    // TODO IMPORTANT: Seems a state being deleted triggers the metadata action /lul.\r\n    const triggerVal: Option.Option<unknown> = this.isNullOrUndefined(state?.val)\r\n      ? Option.none()\r\n      : Option.some(state?.val);\r\n\r\n    const host = triggeredForComponent.serverMetadata.host;\r\n    const descriptor = this.getComponentDescriptorByComponent(triggeredForComponent);\r\n    const success = await this._outboundStateChangeCallback(host, descriptor, changeType, triggerVal);\r\n\r\n    if (success) {\r\n      await this.setStateAsync(id, { ack: true });\r\n    }\r\n  }\r\n\r\n  getDevicePrefix(host: AcaadHost): string {\r\n    return this.escapeComponentName(host.friendlyName);\r\n  }\r\n\r\n  getComponentDescriptorByComponent(component: Component): ComponentDescriptor {\r\n    const deviceName = `${this.getDevicePrefix(component.serverMetadata.host)}.${component.name}`;\r\n    const escapedName = this.escapeComponentName(deviceName);\r\n\r\n    return new ComponentDescriptor(escapedName);\r\n  }\r\n\r\n  // TODO: Temporary\r\n  private isNullOrUndefined(val: unknown): boolean {\r\n    return val === null || val === undefined;\r\n  }\r\n\r\n  public async setStateAsync(id: string, val: ioBroker.SettableState): Promise<void> {\r\n    this.logger.logTrace(`Setting state ${id} to ${JSON.stringify(val)}`);\r\n\r\n    await this._adapter.setState(id, { ...val, ack: true });\r\n  }\r\n\r\n  // Hooray for nested ternaries!\r\n  // TODO: Use regex.. map from group 1..\r\n  private getChangeType(id: string): ChangeType | null {\r\n    return id.endsWith(`.${Actions.Sync}`)\r\n      ? 'query'\r\n      : id.endsWith(`.${Actions.Switch}`) || id.endsWith(`.${Actions.Trigger}`)\r\n        ? 'action'\r\n        : null;\r\n  }\r\n\r\n  async addObjectAsync(objectIdentifier: string, component: Component): Promise<void> {\r\n    // TODO: Mutex removed\r\n\r\n    try {\r\n      if (!this._componentState[objectIdentifier]) {\r\n        this._componentState[objectIdentifier] = component;\r\n        return;\r\n      }\r\n\r\n      throw new Error(\r\n        `Component with identifier ${objectIdentifier} already exists. This is invalid and might happen if components contain forbidden characters and are not unique anymore after stripping. Check the configuration on ACAAD side.`\r\n      );\r\n    } finally {\r\n      // TODO: Mutex removed\r\n    }\r\n  }\r\n\r\n  escapeComponentName(name: string): string {\r\n    return name.replaceAll(this._adapter.FORBIDDEN_CHARS, '');\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_IoBroker", "IoBrokerLogger"]
}
