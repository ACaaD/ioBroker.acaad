{
  "version": 3,
  "sources": ["../../src/services/IoBroker.ConnectedServiceAdapter.ts"],
  "sourcesContent": ["import {\r\n  IConnectedServiceAdapter,\r\n  ICsLogger,\r\n  AcaadHost,\r\n  DependencyInjectionTokens,\r\n  Component,\r\n  ComponentType,\r\n  ComponentDescriptor,\r\n  ComponentTypes,\r\n  AcaadOutcome,\r\n  AcaadServerMetadata,\r\n  AcaadUnitOfMeasure,\r\n  AcaadError,\r\n  ConfigurationError,\r\n  OutboundStateChangeCallback\r\n} from '@acaad/core';\r\n\r\nimport { inject, injectable, singleton } from 'tsyringe';\r\nimport { IoBrokerContext } from './IoBroker.Context';\r\nimport { Effect } from 'effect';\r\nimport { Option } from 'effect/Option';\r\nimport { Actions } from './IoBroker.Constants';\r\n\r\nconst STATE_SUFFIXES = {\r\n  ACAAD_VERSION: 'acaadVersion',\r\n  CONNECTED: 'connected',\r\n  NAME: 'name',\r\n  REACHABLE: 'reachable'\r\n};\r\n\r\n@singleton()\r\n@injectable()\r\nexport class IoBrokerCsAdapter implements IConnectedServiceAdapter {\r\n  private _ioBrokerContext: IoBrokerContext;\r\n  private _logger: ICsLogger;\r\n\r\n  constructor(\r\n    @inject(IoBrokerContext.Token) ioBrokerContext: IoBrokerContext,\r\n    @inject(DependencyInjectionTokens.Logger) logger: ICsLogger\r\n  ) {\r\n    this._ioBrokerContext = ioBrokerContext;\r\n    this._logger = logger;\r\n  }\r\n\r\n  async onServerConnectedAsync(server: AcaadHost): Promise<void> {\r\n    const device = this.getDevicePrefix(server);\r\n    const connectedState = `${device}.${STATE_SUFFIXES.CONNECTED}`;\r\n\r\n    await this._ioBrokerContext.setStateAsync(connectedState, { val: true });\r\n  }\r\n\r\n  async onServerDisconnectedAsync(server: AcaadHost): Promise<void> {\r\n    const device = this.getDevicePrefix(server);\r\n    const connectedState = `${device}.${STATE_SUFFIXES.CONNECTED}`;\r\n\r\n    await this._ioBrokerContext.setStateAsync(connectedState, { val: false });\r\n  }\r\n\r\n  getAllowedConcurrency(): number {\r\n    return 4;\r\n  }\r\n\r\n  getConnectedServersAsync(): Effect.Effect<AcaadHost[], AcaadError> {\r\n    const hosts = this._ioBrokerContext.getConfiguredServers();\r\n\r\n    return hosts.length > 0\r\n      ? Effect.succeed(hosts)\r\n      : Effect.fail(new ConfigurationError('No hosts configured. Stopping.'));\r\n  }\r\n\r\n  getDevicePrefix(host: AcaadHost): string {\r\n    return this._ioBrokerContext.escapeComponentName(host.friendlyName);\r\n  }\r\n\r\n  getComponentDescriptorByComponent(component: Component): ComponentDescriptor {\r\n    const deviceName = `${this.getDevicePrefix(component.serverMetadata.host)}.${component.name}`;\r\n    const escapedName = this._ioBrokerContext.escapeComponentName(deviceName);\r\n\r\n    return new ComponentDescriptor(escapedName);\r\n  }\r\n\r\n  transformUnitOfMeasure(uom: AcaadUnitOfMeasure): unknown {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  async updateComponentStateAsync(cd: ComponentDescriptor, obj: unknown): Promise<void> {\r\n    // Identifier can be discovered through cd.type inspection? Does this make sense?\r\n    const stateId = `${cd.toIdentifier()}.Value`;\r\n\r\n    await this._ioBrokerContext.setStateAsync(stateId, {\r\n      val: (obj as AcaadOutcome)?.outcomeRaw ?? ''\r\n    });\r\n  }\r\n\r\n  async createServerMetadataAsync(deviceId: string, serverMetadata: AcaadServerMetadata): Promise<void> {\r\n    const extendObjects: ioBroker.PartialObject[] = [\r\n      {\r\n        _id: STATE_SUFFIXES.NAME,\r\n        type: 'state',\r\n        common: {\r\n          type: 'string',\r\n          name: 'Servername',\r\n          read: true,\r\n          write: false,\r\n          def: serverMetadata.host.friendlyName,\r\n          desc: 'The name of the server as provided by the server itself.'\r\n        }\r\n      },\r\n      {\r\n        _id: STATE_SUFFIXES.ACAAD_VERSION,\r\n        type: 'state',\r\n        common: {\r\n          type: 'string',\r\n          name: 'Source Version',\r\n          read: true,\r\n          write: false,\r\n          def: serverMetadata.info.acaad,\r\n          desc: 'Git commit hash of the acaad server binary'\r\n        }\r\n      },\r\n      {\r\n        _id: STATE_SUFFIXES.REACHABLE,\r\n        type: 'state',\r\n        common: {\r\n          type: 'boolean',\r\n          name: 'Reachable',\r\n          desc: 'True iff the configuration was synced from the server at least once.',\r\n          read: true,\r\n          write: false,\r\n          def: true\r\n        }\r\n      },\r\n      {\r\n        _id: STATE_SUFFIXES.CONNECTED,\r\n        type: 'state',\r\n        common: {\r\n          type: 'boolean',\r\n          name: 'Connected',\r\n          desc: 'True if the adapter is currently connected to the server and listening for events.',\r\n          read: true,\r\n          write: false,\r\n          def: false\r\n        }\r\n      }\r\n    ];\r\n\r\n    this._logger.logTrace(`Creating ${extendObjects.length} metadata records for device '${deviceId}'.`);\r\n\r\n    await Promise.all(\r\n      extendObjects.map(({ _id: suffix, ...payload }) =>\r\n        this._ioBrokerContext.extendObjectAsync(`${deviceId}.${suffix}`, payload)\r\n      )\r\n    );\r\n  }\r\n\r\n  async createServerModelAsync(server: AcaadServerMetadata): Promise<void> {\r\n    const deviceId = this.getDevicePrefix(server.host);\r\n\r\n    await this._ioBrokerContext.extendObjectAsync(deviceId, {\r\n      type: 'device',\r\n      common: {\r\n        name: server.host.friendlyName,\r\n        statusStates: {\r\n          onlineId: `${this._ioBrokerContext.getNamespace()}.${deviceId}.${STATE_SUFFIXES.CONNECTED}`\r\n        }\r\n      }\r\n    });\r\n\r\n    await this.createServerMetadataAsync(deviceId, server);\r\n  }\r\n\r\n  async createComponentModelAsync(component: Component): Promise<void> {\r\n    const componentDescriptor = this.getComponentDescriptorByComponent(component);\r\n\r\n    const deviceId = componentDescriptor.toIdentifier();\r\n\r\n    await this._ioBrokerContext.extendObjectAsync(deviceId, {\r\n      type: 'channel',\r\n      common: {\r\n        name: component.type\r\n      }\r\n    });\r\n\r\n    await Promise.all(\r\n      this.handleComponent(component).map(async ({ _id: idSuffix, ...ioBrokerObject }) => {\r\n        const sId = `${deviceId}.${idSuffix}`;\r\n        this._logger.logTrace(`Extending object with identifier: '${sId}'.`);\r\n        await this._ioBrokerContext.extendObjectAsync(sId, ioBrokerObject);\r\n\r\n        await this._ioBrokerContext.addObjectAsync(\r\n          `${this._ioBrokerContext.getNamespace()}.${sId}`,\r\n          component\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  async registerStateChangeCallbackAsync(cb: OutboundStateChangeCallback): Promise<void> {\r\n    await this._ioBrokerContext.registerStateChangeCallbackAsync(cb);\r\n  }\r\n\r\n  handleComponent(component: ComponentTypes): ioBroker.PartialObject[] {\r\n    switch (component.type) {\r\n      case ComponentType.Button:\r\n        return [\r\n          {\r\n            _id: Actions.Trigger,\r\n            type: 'state',\r\n            common: {\r\n              type: 'boolean',\r\n              role: 'button',\r\n              read: false,\r\n              write: true\r\n            }\r\n          }\r\n        ];\r\n      case ComponentType.Sensor:\r\n        return [\r\n          {\r\n            _id: 'Value',\r\n            type: 'state',\r\n            common: {\r\n              type: 'string', // TODO -> Only user knows\r\n              role: 'state',\r\n              read: true,\r\n              write: false\r\n            }\r\n          },\r\n          {\r\n            _id: Actions.Sync,\r\n            type: 'state',\r\n            common: {\r\n              type: 'boolean',\r\n              role: 'button',\r\n              read: false,\r\n              write: true,\r\n              name: 'Trigger Sync'\r\n            }\r\n          }\r\n        ];\r\n      case ComponentType.Switch:\r\n        return [\r\n          {\r\n            _id: Actions.Switch,\r\n            type: 'state',\r\n            common: {\r\n              type: 'boolean',\r\n              read: true,\r\n              write: true,\r\n              role: 'switch'\r\n            }\r\n          },\r\n          {\r\n            _id: Actions.Sync,\r\n            type: 'state',\r\n            common: {\r\n              type: 'boolean',\r\n              role: 'button',\r\n              read: false,\r\n              write: true,\r\n              name: 'Trigger Sync'\r\n            }\r\n          }\r\n        ];\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_IoBroker"]
}
